from qiskit import QuantumCircuit, transpile
from qiskit_aer import AerSimulator
qc = QuantumCircuit(10, 10)
qc.ry(0.713167535387304,[0])
qc.ry(0.576493042808573,[1])
qc.cx([0], [1])
qc.ry(0.692269120971076,[2])
qc.cx([0], [2])
qc.cx([1], [2])
qc.ry(0.485165291032223,[3])
qc.cx([0], [3])
qc.cx([1], [3])
qc.cx([2], [3])
qc.ry(0.451773991538201,[4])
qc.cx([0], [4])
qc.cx([1], [4])
qc.cx([2], [4])
qc.cx([3], [4])
qc.ry(0.599122382121516,[5])
qc.cx([0], [5])
qc.cx([1], [5])
qc.cx([2], [5])
qc.cx([3], [5])
qc.cx([4], [5])
qc.ry(0.116352790263393,[6])
qc.cx([0], [6])
qc.cx([1], [6])
qc.cx([2], [6])
qc.cx([3], [6])
qc.cx([4], [6])
qc.cx([5], [6])
qc.ry(0.493477821065035,[7])
qc.cx([0], [7])
qc.cx([1], [7])
qc.cx([2], [7])
qc.cx([3], [7])
qc.cx([4], [7])
qc.cx([5], [7])
qc.cx([6], [7])
qc.ry(0.600676641660616,[8])
qc.cx([0], [8])
qc.cx([1], [8])
qc.cx([2], [8])
qc.cx([3], [8])
qc.cx([4], [8])
qc.cx([5], [8])
qc.cx([6], [8])
qc.cx([7], [8])
qc.ry(0.61103625110353,[9])
qc.cx([0], [9])
qc.ry(0.433733877684016,[0])
qc.cx([1], [9])
qc.ry(0.295541408815367,[1])
qc.cx([0], [1])
qc.cx([2], [9])
qc.ry(0.231542241363332,[2])
qc.cx([0], [2])
qc.cx([1], [2])
qc.cx([3], [9])
qc.ry(0.746847766345664,[3])
qc.cx([0], [3])
qc.cx([1], [3])
qc.cx([2], [3])
qc.cx([4], [9])
qc.ry(0.870234659124262,[4])
qc.cx([0], [4])
qc.cx([1], [4])
qc.cx([2], [4])
qc.cx([3], [4])
qc.cx([5], [9])
qc.ry(0.354722873168215,[5])
qc.cx([0], [5])
qc.cx([1], [5])
qc.cx([2], [5])
qc.cx([3], [5])
qc.cx([4], [5])
qc.cx([6], [9])
qc.ry(0.0726206384483412,[6])
qc.cx([0], [6])
qc.cx([1], [6])
qc.cx([2], [6])
qc.cx([3], [6])
qc.cx([4], [6])
qc.cx([5], [6])
qc.cx([7], [9])
qc.ry(0.0432287482687754,[7])
qc.cx([0], [7])
qc.cx([1], [7])
qc.cx([2], [7])
qc.cx([3], [7])
qc.cx([4], [7])
qc.cx([5], [7])
qc.cx([6], [7])
qc.cx([8], [9])
qc.ry(0.59205931266538,[8])
qc.cx([0], [8])
qc.cx([1], [8])
qc.cx([2], [8])
qc.cx([3], [8])
qc.cx([4], [8])
qc.cx([5], [8])
qc.cx([6], [8])
qc.cx([7], [8])
qc.ry(0.0951820864060599,[9])
qc.cx([0], [9])
qc.ry(0.526347537210009,[0])
qc.cx([1], [9])
qc.ry(0.865822033213242,[1])
qc.cx([0], [1])
qc.cx([2], [9])
qc.ry(0.695445228212583,[2])
qc.cx([0], [2])
qc.cx([1], [2])
qc.cx([3], [9])
qc.ry(0.577301411201743,[3])
qc.cx([0], [3])
qc.cx([1], [3])
qc.cx([2], [3])
qc.cx([4], [9])
qc.ry(0.48369293271706,[4])
qc.cx([0], [4])
qc.cx([1], [4])
qc.cx([2], [4])
qc.cx([3], [4])
qc.cx([5], [9])
qc.ry(0.0476185775751665,[5])
qc.cx([0], [5])
qc.cx([1], [5])
qc.cx([2], [5])
qc.cx([3], [5])
qc.cx([4], [5])
qc.cx([6], [9])
qc.ry(0.32505526825834,[6])
qc.cx([0], [6])
qc.cx([1], [6])
qc.cx([2], [6])
qc.cx([3], [6])
qc.cx([4], [6])
qc.cx([5], [6])
qc.cx([7], [9])
qc.ry(0.789063828309894,[7])
qc.cx([0], [7])
qc.cx([1], [7])
qc.cx([2], [7])
qc.cx([3], [7])
qc.cx([4], [7])
qc.cx([5], [7])
qc.cx([6], [7])
qc.cx([8], [9])
qc.ry(0.893204212142423,[8])
qc.cx([0], [8])
qc.cx([1], [8])
qc.cx([2], [8])
qc.cx([3], [8])
qc.cx([4], [8])
qc.cx([5], [8])
qc.cx([6], [8])
qc.cx([7], [8])
qc.ry(0.327740580990657,[9])
qc.cx([0], [9])
qc.ry(0.116112545214201,[0])
qc.cx([1], [9])
qc.ry(0.271179192845634,[1])
qc.cx([2], [9])
qc.ry(0.70748143535946,[2])
qc.cx([3], [9])
qc.ry(0.871450901026016,[3])
qc.cx([4], [9])
qc.ry(0.136754145976206,[4])
qc.cx([5], [9])
qc.ry(0.356200229849422,[5])
qc.cx([6], [9])
qc.ry(0.72866522093727,[6])
qc.cx([7], [9])
qc.ry(0.185421623605097,[7])
qc.cx([8], [9])
qc.ry(0.24168571478831,[8])
qc.ry(0.0185344006124026,[9])
qc.barrier([0], [1], [2], [3], [4], [5], [6], [7], [8], [9])
