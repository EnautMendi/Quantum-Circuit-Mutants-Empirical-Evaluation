from qiskit import QuantumCircuit, transpile
from qiskit_aer import AerSimulator
qc = QuantumCircuit(10, 10)
qc.ry(0.75283379882211,[0])
qc.ry(0.889764092028825,[1])
qc.cx([0], [1])
qc.ry(0.599066001374826,[2])
qc.cx([0], [2])
qc.cx([1], [2])
qc.ry(0.746578351130499,[3])
qc.cx([0], [3])
qc.cx([1], [3])
qc.cx([2], [3])
qc.ry(0.537247960244414,[4])
qc.cx([0], [4])
qc.cx([1], [4])
qc.cx([2], [4])
qc.cx([3], [4])
qc.ry(0.256198185789791,[5])
qc.cx([0], [5])
qc.cx([1], [5])
qc.cx([2], [5])
qc.cx([3], [5])
qc.cx([4], [5])
qc.ry(0.519860284502891,[6])
qc.cx([0], [6])
qc.cx([1], [6])
qc.cx([2], [6])
qc.cx([3], [6])
qc.cx([4], [6])
qc.cx([5], [6])
qc.ry(0.560225137038058,[7])
qc.cx([0], [7])
qc.cx([1], [7])
qc.cx([2], [7])
qc.cx([3], [7])
qc.cx([4], [7])
qc.cx([5], [7])
qc.cx([6], [7])
qc.ry(0.00523857778394166,[8])
qc.cx([0], [8])
qc.cx([1], [8])
qc.cx([2], [8])
qc.cx([3], [8])
qc.cx([4], [8])
qc.cx([5], [8])
qc.cx([6], [8])
qc.cx([7], [8])
qc.ry(0.824686801991655,[9])
qc.cx([0], [9])
qc.ry(0.0945651878997767,[0])
qc.cx([1], [9])
qc.ry(0.472102174984569,[1])
qc.cx([0], [1])
qc.cx([2], [9])
qc.ry(0.402340085436727,[2])
qc.cx([0], [2])
qc.cx([1], [2])
qc.cx([3], [9])
qc.ry(0.667552335471034,[3])
qc.cx([0], [3])
qc.cx([1], [3])
qc.cx([2], [3])
qc.cx([4], [9])
qc.ry(0.20514812640106,[4])
qc.cx([0], [4])
qc.cx([1], [4])
qc.cx([2], [4])
qc.cx([3], [4])
qc.cx([5], [9])
qc.ry(0.20288597320174,[5])
qc.cx([0], [5])
qc.cx([1], [5])
qc.cx([2], [5])
qc.cx([3], [5])
qc.cx([4], [5])
qc.cx([6], [9])
qc.ry(0.907884577504758,[6])
qc.cx([0], [6])
qc.cx([1], [6])
qc.cx([2], [6])
qc.cx([3], [6])
qc.cx([4], [6])
qc.cx([5], [6])
qc.cx([7], [9])
qc.ry(0.295250998646358,[7])
qc.cx([0], [7])
qc.cx([1], [7])
qc.cx([2], [7])
qc.cx([3], [7])
qc.cx([4], [7])
qc.cx([5], [7])
qc.cx([6], [7])
qc.cx([8], [9])
qc.ry(0.923716866240939,[8])
qc.cx([0], [8])
qc.cx([1], [8])
qc.cx([2], [8])
qc.cx([3], [8])
qc.cx([4], [8])
qc.cx([5], [8])
qc.cx([6], [8])
qc.cx([7], [8])
qc.ry(0.780818666666845,[9])
qc.cx([0], [9])
qc.ry(0.737391598079613,[0])
qc.cx([1], [9])
qc.ry(0.465836446028513,[1])
qc.cx([0], [1])
qc.cx([2], [9])
qc.ry(0.371666489649566,[2])
qc.cx([0], [2])
qc.cx([1], [2])
qc.cx([3], [9])
qc.ry(0.877546389114645,[3])
qc.cx([0], [3])
qc.cx([1], [3])
qc.cx([2], [3])
qc.cx([4], [9])
qc.ry(0.35470036948504,[4])
qc.cx([0], [4])
qc.cx([1], [4])
qc.cx([2], [4])
qc.cx([3], [4])
qc.cx([5], [9])
qc.ry(0.307844327535577,[5])
qc.cx([0], [5])
qc.cx([1], [5])
qc.cx([2], [5])
qc.cx([3], [5])
qc.cx([4], [5])
qc.cx([6], [9])
qc.ry(0.619538320936343,[6])
qc.cx([0], [6])
qc.cx([1], [6])
qc.cx([2], [6])
qc.cx([3], [6])
qc.cx([4], [6])
qc.cx([5], [6])
qc.cx([7], [9])
qc.ry(0.215252532255364,[7])
qc.cx([0], [7])
qc.cx([1], [7])
qc.cx([2], [7])
qc.cx([3], [7])
qc.cx([4], [7])
qc.cx([5], [7])
qc.cx([6], [7])
qc.cx([8], [9])
qc.ry(0.798471889593587,[8])
qc.cx([0], [8])
qc.cx([1], [8])
qc.cx([2], [8])
qc.cx([3], [8])
qc.cx([4], [8])
qc.cx([5], [8])
qc.cx([6], [8])
qc.cx([7], [8])
qc.ry(0.437581952580158,[9])
qc.cx([0], [9])
qc.ry(0.924635076901932,[0])
qc.cx([1], [9])
qc.ry(0.998216544882441,[1])
qc.cx([2], [9])
qc.ry(0.964945719344366,[2])
qc.cx([3], [9])
qc.ry(0.957815860923699,[3])
qc.cx([4], [9])
qc.ry(0.470322747027747,[4])
qc.cx([5], [9])
qc.ry(0.236119338193653,[5])
qc.cx([6], [9])
qc.ry(0.820178014832614,[6])
qc.cx([7], [9])
qc.ry(0.848016820564718,[7])
qc.cx([8], [9])
qc.ry(0.0562581028804987,[8])
qc.ry(0.727162159509116,[9])
qc.barrier([0], [1], [2], [3], [4], [5], [6], [7], [8], [9])
