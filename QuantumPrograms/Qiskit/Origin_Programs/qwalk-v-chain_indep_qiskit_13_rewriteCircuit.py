from qiskit import QuantumCircuit, transpile
from qiskit_aer import AerSimulator
qc = QuantumCircuit(13, 13)
qc.h([7])
qc.rccx([7], [1], [8])
qc.rccx([2], [8], [9])
qc.rccx([3], [9], [10])
qc.rccx([4], [10], [11])
qc.rccx([5], [11], [12])
qc.ccx([6], [12], [0])
qc.rccx([5], [11], [12])
qc.rccx([4], [10], [11])
qc.rccx([3], [9], [10])
qc.rccx([2], [8], [9])
qc.rccx([7], [1], [8])
qc.rccx([7], [2], [8])
qc.rccx([3], [8], [9])
qc.rccx([4], [9], [10])
qc.rccx([5], [10], [11])
qc.ccx([6], [11], [1])
qc.x([1])
qc.rccx([5], [10], [11])
qc.rccx([4], [9], [10])
qc.rccx([3], [8], [9])
qc.rccx([7], [2], [8])
qc.rccx([7], [3], [8])
qc.rccx([4], [8], [9])
qc.rccx([5], [9], [10])
qc.ccx([6], [10], [2])
qc.x([2])
qc.rccx([5], [9], [10])
qc.rccx([4], [8], [9])
qc.rccx([7], [3], [8])
qc.rccx([7], [4], [8])
qc.rccx([5], [8], [9])
qc.ccx([6], [9], [3])
qc.x([3])
qc.rccx([5], [8], [9])
qc.rccx([7], [4], [8])
qc.rccx([7], [5], [8])
qc.ccx([6], [8], [4])
qc.rccx([7], [5], [8])
qc.ccx([7], [6], [5])
qc.cx([7], [6])
qc.x([7])
qc.rccx([7], [1], [8])
qc.rccx([2], [8], [9])
qc.rccx([3], [9], [10])
qc.x([4])
qc.rccx([4], [10], [11])
qc.x([5])
qc.rccx([5], [11], [12])
qc.x([6])
qc.ccx([6], [12], [0])
qc.rccx([5], [11], [12])
qc.rccx([4], [10], [11])
qc.rccx([3], [9], [10])
qc.rccx([2], [8], [9])
qc.rccx([7], [1], [8])
qc.rccx([7], [2], [8])
qc.rccx([3], [8], [9])
qc.rccx([4], [9], [10])
qc.rccx([5], [10], [11])
qc.ccx([6], [11], [1])
qc.x([1])
qc.rccx([5], [10], [11])
qc.rccx([4], [9], [10])
qc.rccx([3], [8], [9])
qc.rccx([7], [2], [8])
qc.rccx([7], [3], [8])
qc.rccx([4], [8], [9])
qc.rccx([5], [9], [10])
qc.ccx([6], [10], [2])
qc.x([2])
qc.rccx([5], [9], [10])
qc.rccx([4], [8], [9])
qc.rccx([7], [3], [8])
qc.rccx([7], [4], [8])
qc.rccx([5], [8], [9])
qc.ccx([6], [9], [3])
qc.x([3])
qc.rccx([5], [8], [9])
qc.rccx([7], [4], [8])
qc.rccx([7], [5], [8])
qc.ccx([6], [8], [4])
qc.rccx([7], [5], [8])
qc.ccx([7], [6], [5])
qc.cx([7], [6])
qc.u(1.5707963267948966,-3.141592653589793,-3.141592653589793,[7])
qc.rccx([7], [1], [8])
qc.rccx([2], [8], [9])
qc.rccx([3], [9], [10])
qc.x([4])
qc.rccx([4], [10], [11])
qc.x([5])
qc.rccx([5], [11], [12])
qc.x([6])
qc.ccx([6], [12], [0])
qc.rccx([5], [11], [12])
qc.rccx([4], [10], [11])
qc.rccx([3], [9], [10])
qc.rccx([2], [8], [9])
qc.rccx([7], [1], [8])
qc.rccx([7], [2], [8])
qc.rccx([3], [8], [9])
qc.rccx([4], [9], [10])
qc.rccx([5], [10], [11])
qc.ccx([6], [11], [1])
qc.x([1])
qc.rccx([5], [10], [11])
qc.rccx([4], [9], [10])
qc.rccx([3], [8], [9])
qc.rccx([7], [2], [8])
qc.rccx([7], [3], [8])
qc.rccx([4], [8], [9])
qc.rccx([5], [9], [10])
qc.ccx([6], [10], [2])
qc.x([2])
qc.rccx([5], [9], [10])
qc.rccx([4], [8], [9])
qc.rccx([7], [3], [8])
qc.rccx([7], [4], [8])
qc.rccx([5], [8], [9])
qc.ccx([6], [9], [3])
qc.x([3])
qc.rccx([5], [8], [9])
qc.rccx([7], [4], [8])
qc.rccx([7], [5], [8])
qc.ccx([6], [8], [4])
qc.rccx([7], [5], [8])
qc.ccx([7], [6], [5])
qc.cx([7], [6])
qc.x([7])
qc.rccx([7], [1], [8])
qc.rccx([2], [8], [9])
qc.rccx([3], [9], [10])
qc.x([4])
qc.rccx([4], [10], [11])
qc.x([5])
qc.rccx([5], [11], [12])
qc.x([6])
qc.ccx([6], [12], [0])
qc.rccx([5], [11], [12])
qc.rccx([4], [10], [11])
qc.rccx([3], [9], [10])
qc.rccx([2], [8], [9])
qc.rccx([7], [1], [8])
qc.rccx([7], [2], [8])
qc.rccx([3], [8], [9])
qc.rccx([4], [9], [10])
qc.rccx([5], [10], [11])
qc.ccx([6], [11], [1])
qc.x([1])
qc.rccx([5], [10], [11])
qc.rccx([4], [9], [10])
qc.rccx([3], [8], [9])
qc.rccx([7], [2], [8])
qc.rccx([7], [3], [8])
qc.rccx([4], [8], [9])
qc.rccx([5], [9], [10])
qc.ccx([6], [10], [2])
qc.x([2])
qc.rccx([5], [9], [10])
qc.rccx([4], [8], [9])
qc.rccx([7], [3], [8])
qc.rccx([7], [4], [8])
qc.rccx([5], [8], [9])
qc.ccx([6], [9], [3])
qc.x([3])
qc.rccx([5], [8], [9])
qc.rccx([7], [4], [8])
qc.rccx([7], [5], [8])
qc.ccx([6], [8], [4])
qc.rccx([7], [5], [8])
qc.ccx([7], [6], [5])
qc.cx([7], [6])
qc.u(1.5707963267948966,-3.141592653589793,-3.141592653589793,[7])
qc.rccx([7], [1], [8])
qc.rccx([2], [8], [9])
qc.rccx([3], [9], [10])
qc.x([4])
qc.rccx([4], [10], [11])
qc.x([5])
qc.rccx([5], [11], [12])
qc.x([6])
qc.ccx([6], [12], [0])
qc.rccx([5], [11], [12])
qc.rccx([4], [10], [11])
qc.rccx([3], [9], [10])
qc.rccx([2], [8], [9])
qc.rccx([7], [1], [8])
qc.rccx([7], [2], [8])
qc.rccx([3], [8], [9])
qc.rccx([4], [9], [10])
qc.rccx([5], [10], [11])
qc.ccx([6], [11], [1])
qc.x([1])
qc.rccx([5], [10], [11])
qc.rccx([4], [9], [10])
qc.rccx([3], [8], [9])
qc.rccx([7], [2], [8])
qc.rccx([7], [3], [8])
qc.rccx([4], [8], [9])
qc.rccx([5], [9], [10])
qc.ccx([6], [10], [2])
qc.x([2])
qc.rccx([5], [9], [10])
qc.rccx([4], [8], [9])
qc.rccx([7], [3], [8])
qc.rccx([7], [4], [8])
qc.rccx([5], [8], [9])
qc.ccx([6], [9], [3])
qc.x([3])
qc.rccx([5], [8], [9])
qc.rccx([7], [4], [8])
qc.rccx([7], [5], [8])
qc.ccx([6], [8], [4])
qc.rccx([7], [5], [8])
qc.ccx([7], [6], [5])
qc.cx([7], [6])
qc.x([7])
qc.rccx([7], [1], [8])
qc.rccx([2], [8], [9])
qc.rccx([3], [9], [10])
qc.x([4])
qc.rccx([4], [10], [11])
qc.x([5])
qc.rccx([5], [11], [12])
qc.x([6])
qc.ccx([6], [12], [0])
qc.rccx([5], [11], [12])
qc.rccx([4], [10], [11])
qc.rccx([3], [9], [10])
qc.rccx([2], [8], [9])
qc.rccx([7], [1], [8])
qc.rccx([7], [2], [8])
qc.rccx([3], [8], [9])
qc.rccx([4], [9], [10])
qc.rccx([5], [10], [11])
qc.ccx([6], [11], [1])
qc.x([1])
qc.rccx([5], [10], [11])
qc.rccx([4], [9], [10])
qc.rccx([3], [8], [9])
qc.rccx([7], [2], [8])
qc.rccx([7], [3], [8])
qc.rccx([4], [8], [9])
qc.rccx([5], [9], [10])
qc.ccx([6], [10], [2])
qc.x([2])
qc.rccx([5], [9], [10])
qc.rccx([4], [8], [9])
qc.rccx([7], [3], [8])
qc.rccx([7], [4], [8])
qc.rccx([5], [8], [9])
qc.ccx([6], [9], [3])
qc.x([3])
qc.rccx([5], [8], [9])
qc.rccx([7], [4], [8])
qc.rccx([7], [5], [8])
qc.ccx([6], [8], [4])
qc.rccx([7], [5], [8])
qc.ccx([7], [6], [5])
qc.cx([7], [6])
qc.x([7])
qc.x([4])
qc.x([5])
qc.x([6])
qc.barrier([0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12])
