from qiskit import QuantumCircuit, transpile
from qiskit_aer import AerSimulator
qc = QuantumCircuit(11, 11)
qc.h([6])
qc.rccx([6], [1], [7])
qc.rccx([2], [7], [8])
qc.rccx([3], [8], [9])
qc.rccx([4], [9], [10])
qc.ccx([5], [10], [0])
qc.rccx([4], [9], [10])
qc.rccx([3], [8], [9])
qc.rccx([2], [7], [8])
qc.rccx([6], [1], [7])
qc.rccx([6], [2], [7])
qc.rccx([3], [7], [8])
qc.rccx([4], [8], [9])
qc.ccx([5], [9], [1])
qc.x([1])
qc.rccx([4], [8], [9])
qc.rccx([3], [7], [8])
qc.rccx([6], [2], [7])
qc.rccx([6], [3], [7])
qc.rccx([4], [7], [8])
qc.ccx([5], [8], [2])
qc.x([2])
qc.rccx([4], [7], [8])
qc.rccx([6], [3], [7])
qc.rccx([6], [4], [7])
qc.ccx([5], [7], [3])
qc.rccx([6], [4], [7])
qc.ccx([6], [5], [4])
qc.cx([6], [5])
qc.x([6])
qc.rccx([6], [1], [7])
qc.rccx([2], [7], [8])
qc.x([3])
qc.rccx([3], [8], [9])
qc.x([4])
qc.rccx([4], [9], [10])
qc.x([5])
qc.ccx([5], [10], [0])
qc.rccx([4], [9], [10])
qc.rccx([3], [8], [9])
qc.rccx([2], [7], [8])
qc.rccx([6], [1], [7])
qc.rccx([6], [2], [7])
qc.rccx([3], [7], [8])
qc.rccx([4], [8], [9])
qc.ccx([5], [9], [1])
qc.x([1])
qc.rccx([4], [8], [9])
qc.rccx([3], [7], [8])
qc.rccx([6], [2], [7])
qc.rccx([6], [3], [7])
qc.rccx([4], [7], [8])
qc.ccx([5], [8], [2])
qc.x([2])
qc.rccx([4], [7], [8])
qc.rccx([6], [3], [7])
qc.rccx([6], [4], [7])
qc.ccx([5], [7], [3])
qc.rccx([6], [4], [7])
qc.ccx([6], [5], [4])
qc.cx([6], [5])
qc.u(1.5707963267948966,-3.141592653589793,-3.141592653589793,[6])
qc.rccx([6], [1], [7])
qc.rccx([2], [7], [8])
qc.x([3])
qc.rccx([3], [8], [9])
qc.x([4])
qc.rccx([4], [9], [10])
qc.x([5])
qc.ccx([5], [10], [0])
qc.rccx([4], [9], [10])
qc.rccx([3], [8], [9])
qc.rccx([2], [7], [8])
qc.rccx([6], [1], [7])
qc.rccx([6], [2], [7])
qc.rccx([3], [7], [8])
qc.rccx([4], [8], [9])
qc.ccx([5], [9], [1])
qc.x([1])
qc.rccx([4], [8], [9])
qc.rccx([3], [7], [8])
qc.rccx([6], [2], [7])
qc.rccx([6], [3], [7])
qc.rccx([4], [7], [8])
qc.ccx([5], [8], [2])
qc.x([2])
qc.rccx([4], [7], [8])
qc.rccx([6], [3], [7])
qc.rccx([6], [4], [7])
qc.ccx([5], [7], [3])
qc.rccx([6], [4], [7])
qc.ccx([6], [5], [4])
qc.cx([6], [5])
qc.x([6])
qc.rccx([6], [1], [7])
qc.rccx([2], [7], [8])
qc.x([3])
qc.rccx([3], [8], [9])
qc.x([4])
qc.rccx([4], [9], [10])
qc.x([5])
qc.ccx([5], [10], [0])
qc.rccx([4], [9], [10])
qc.rccx([3], [8], [9])
qc.rccx([2], [7], [8])
qc.rccx([6], [1], [7])
qc.rccx([6], [2], [7])
qc.rccx([3], [7], [8])
qc.rccx([4], [8], [9])
qc.ccx([5], [9], [1])
qc.x([1])
qc.rccx([4], [8], [9])
qc.rccx([3], [7], [8])
qc.rccx([6], [2], [7])
qc.rccx([6], [3], [7])
qc.rccx([4], [7], [8])
qc.ccx([5], [8], [2])
qc.x([2])
qc.rccx([4], [7], [8])
qc.rccx([6], [3], [7])
qc.rccx([6], [4], [7])
qc.ccx([5], [7], [3])
qc.rccx([6], [4], [7])
qc.ccx([6], [5], [4])
qc.cx([6], [5])
qc.u(1.5707963267948966,-3.141592653589793,-3.141592653589793,[6])
qc.rccx([6], [1], [7])
qc.rccx([2], [7], [8])
qc.x([3])
qc.rccx([3], [8], [9])
qc.x([4])
qc.rccx([4], [9], [10])
qc.x([5])
qc.ccx([5], [10], [0])
qc.rccx([4], [9], [10])
qc.rccx([3], [8], [9])
qc.rccx([2], [7], [8])
qc.rccx([6], [1], [7])
qc.rccx([6], [2], [7])
qc.rccx([3], [7], [8])
qc.rccx([4], [8], [9])
qc.ccx([5], [9], [1])
qc.x([1])
qc.rccx([4], [8], [9])
qc.rccx([3], [7], [8])
qc.rccx([6], [2], [7])
qc.rccx([6], [3], [7])
qc.rccx([4], [7], [8])
qc.ccx([5], [8], [2])
qc.x([2])
qc.rccx([4], [7], [8])
qc.rccx([6], [3], [7])
qc.rccx([6], [4], [7])
qc.ccx([5], [7], [3])
qc.rccx([6], [4], [7])
qc.ccx([6], [5], [4])
qc.cx([6], [5])
qc.x([6])
qc.rccx([6], [1], [7])
qc.rccx([2], [7], [8])
qc.x([3])
qc.rccx([3], [8], [9])
qc.x([4])
qc.rccx([4], [9], [10])
qc.x([5])
qc.ccx([5], [10], [0])
qc.rccx([4], [9], [10])
qc.rccx([3], [8], [9])
qc.rccx([2], [7], [8])
qc.rccx([6], [1], [7])
qc.rccx([6], [2], [7])
qc.rccx([3], [7], [8])
qc.rccx([4], [8], [9])
qc.ccx([5], [9], [1])
qc.x([1])
qc.rccx([4], [8], [9])
qc.rccx([3], [7], [8])
qc.rccx([6], [2], [7])
qc.rccx([6], [3], [7])
qc.rccx([4], [7], [8])
qc.ccx([5], [8], [2])
qc.x([2])
qc.rccx([4], [7], [8])
qc.rccx([6], [3], [7])
qc.rccx([6], [4], [7])
qc.ccx([5], [7], [3])
qc.rccx([6], [4], [7])
qc.ccx([6], [5], [4])
qc.cx([6], [5])
qc.x([6])
qc.x([3])
qc.x([4])
qc.x([5])
qc.barrier([0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10])
